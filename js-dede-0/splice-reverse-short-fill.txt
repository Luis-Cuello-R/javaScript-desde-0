Modificaci√≥n avanzada de arrays con splice(), reverse(), sort() y fill()
Vamos a aprender sobre algunos m√©todos m√°s complejos para manipular arrays en JavaScript. Es importante dominar estos m√©todos, porque son comunes en las entrevistas. üëÄ


M√©todo Splice()
El m√©todo splice() te permite agregar o quitar elementos de un array en cualquier posici√≥n. Aqu√≠ tienes un ejemplo:


let frutas = ["manzana", "banana", "mango"];
console.log(frutas); // Imprime: ["manzana", "banana", "mango"]

// Usamos splice() para quitar "banana" y agregar "pera" y "mel√≥n" en su lugar
frutas.splice(1, 1, "pera", "mel√≥n");
console.log(frutas); // Imprime: ["manzana", "pera", "mel√≥n", "mango"]
En este ejemplo, el primer n√∫mero que pasamos a splice() es el √≠ndice donde queremos empezar a cambiar el array (1 en este caso, que corresponde a "banana"). El segundo n√∫mero es cu√°ntos elementos queremos quitar (1 en este caso, as√≠ que solo quitamos "banana"). Despu√©s, todos los argumentos que siguen son los elementos que queremos agregar.


M√©todo Reverse()
El m√©todo reverse() simplemente invierte el orden de los elementos en un array. Mira este ejemplo:


let frutas = ["manzana", "pera", "mango"];
console.log(frutas); // Imprime: ["manzana", "pera", "mango"]

// Usamos reverse() para invertir el orden del array
frutas.reverse();
console.log(frutas); // Imprime: ["mango", "pera", "manzana"]
En este ejemplo, reverse() cambia el orden del array frutas para que "mango" sea el primer elemento y "manzana" sea el √∫ltimo.


M√©todo Sort()
El m√©todo sort() organiza los elementos de un array en orden alfab√©tico. Aqu√≠ tienes un ejemplo:


let frutas = ["mango", "pera", "manzana"];
console.log(frutas); // Imprime: ["mango", "pera", "manzana"]

// Usamos sort() para ordenar el array alfab√©ticamente
frutas.sort();
console.log(frutas); // Imprime: ["manzana", "mango", "pera"]
En este ejemplo, sort() reorganiza el array frutas para que "manzana" sea el primer elemento y "pera" sea el √∫ltimo.


M√©todo Sort() con n√∫meros
El m√©todo sort() tambi√©n se puede utilizar con arrays de n√∫meros. Sin embargo, es importante tener en cuenta que sort() convierte los n√∫meros a strings y luego los compara seg√∫n las reglas de ordenaci√≥n de strings. Esto puede resultar en un ordenamiento que no es num√©rico. Aqu√≠ tienes un ejemplo:


let numeros = [10, 5, 100, 2, 50];
console.log(numeros); // Imprime: [10, 5, 100, 2, 50]

// Usamos sort() para ordenar el array
numeros.sort();
console.log(numeros); // Imprime: [10, 100, 2, 5, 50]
En este ejemplo, puedes ver que sort() no ordena los n√∫meros de menor a mayor, sino que los ordena como si fueran strings, lo que produce un resultado inesperado. Para ordenar un array de n√∫meros de manera num√©rica, tendr√≠as que proporcionar una funci√≥n de comparaci√≥n a sort().


¬øPor qu√© sucede esto con sort() y los n√∫meros?
El m√©todo sort() de JavaScript, cuando se utiliza sin argumentos en un array de n√∫meros, convierte estos n√∫meros a strings y los compara en base a su valor Unicode, no en base a su valor num√©rico. Esto se traduce en un ordenamiento alfab√©tico en lugar de num√©rico. Aqu√≠ te explico paso a paso c√≥mo sucede esto:

Primero, sort() convierte cada n√∫mero del array a un string. Por ejemplo, si tu array original es [10, 5, 100, 2, 50], despu√©s de la conversi√≥n a strings tendr√≠as un array que se ve as√≠: ["10", "5", "100", "2", "50"].
Luego, sort() compara cada par de elementos en el array convertido a string uno a uno. La comparaci√≥n se basa en la posici√≥n de los caracteres en la tabla Unicode, no en su valor num√©rico. Como resultado, los n√∫meros se ordenan como si fueran strings.
En la tabla Unicode, los n√∫meros se ordenan de izquierda a derecha. Es decir, sort() primero mira el primer car√°cter de cada string. Si el primer car√°cter es igual en ambos strings, entonces mira el siguiente car√°cter, y as√≠ sucesivamente.
En el caso de nuestro array de ejemplo, al comparar "10" y "100", por ejemplo, "10" viene antes que "100" porque el primer car√°cter que difiere en los dos strings (el tercero) es inexistente en "10", y cualquier string es menor que un string que lo tiene como prefijo seguido de m√°s caracteres.
Como resultado, el array ordenado se ve as√≠: ["10", "100", "2", "5", "50"].

Para ordenar un array de n√∫meros de manera num√©rica, tendrias que proporcionar una funci√≥n de comparaci√≥n a sort(). Esta funci√≥n toma dos elementos del array a la vez, los compara y determina su orden en base a si el resultado de la comparaci√≥n es negativo, cero o positivo.


M√©todo Sort() con funci√≥n de comparaci√≥n
Para ordenar correctamente un array de n√∫meros en JavaScript, necesitamos proporcionar una funci√≥n de comparaci√≥n a sort(). Esta funci√≥n define el orden de la clasificaci√≥n. Aqu√≠ tienes un ejemplo:


let numeros = [10, 5, 100, 2, 50];
console.log(numeros); // Imprime: [10, 5, 100, 2, 50]

// Usamos sort() con una funci√≥n de comparaci√≥n para ordenar el array
numeros.sort((a, b) => a - b);
console.log(numeros); // Imprime: [2, 5, 10, 50, 100]
En este ejemplo, la funci√≥n de comparaci√≥n (a, b) => a - b ordena los n√∫meros de menor a mayor. Si a - b es menor que cero, sort() ordena a antes que b. Si a - b es mayor que cero, sort() ordena b antes que a. Si a - b es igual a cero, a y b se dejan sin cambios respecto a su orden en el array original (pero se ordenan con respecto a todos los elementos diferentes).


M√©todo Fill()
El m√©todo fill() cambia todos los elementos en un array por un valor est√°tico. Aqu√≠ tienes un ejemplo:


let frutas = ["manzana", "pera", "mango"];
console.log(frutas); // Imprime: ["manzana", "pera", "mango"]

// Usamos fill() para cambiar todos los elementos por "naranja"
frutas.fill("naranja");
console.log(frutas); // Imprime: ["naranja", "naranja", "naranja"]
En este ejemplo, fill() cambia todos los elementos de frutas por "naranja".